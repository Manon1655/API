{% extends 'base.html.twig' %}

{% block title %}API Platform{% endblock %}

{% block body %}
<div class="container mt-5 text-center text-light">
    <h1 class="display-3 font-weight-bold text-neon mb-4">API</h1>

    <hr class="glow my-4">

    <div class="row mt-5">
        {% set items = [
            {'title': 'Adhérents', 'description': 'Accédez à la liste des adhérents', 'route': 'api_adherents'},
            {'title': 'Prêts', 'description': 'Consultez toutes les informations des prêts en cours.', 'route': 'api_prets'},
            {'title': 'Auteurs', 'description': 'Découvrez la liste complète des auteurs', 'route': 'api_auteurs'},
            {'title': 'Éditeurs', 'description': 'Consultez les informations sur les éditeurs.', 'route': 'api_editeurs'},
            {'title': 'Genres', 'description': 'Explorez les différents genres', 'route': 'api_genres'},
            {'title': 'Livres', 'description': 'Parcourez les livres disponibles dans votre bibliothèque.', 'route': 'api_livres'},
            {'title': 'Nationalités', 'description': 'Explorez les nationalités des auteurs.', 'route': 'api_nationalites'}
        ] %}

        {% for item in items %}
            <div class="col-md-4 mb-4">
                <div class="card futuristic-card">
                    <div class="card-body text-center">
                        <h5 class="card-title text-neon">{{ item.title }}</h5>
                        <p class="card-text text-muted">{{ item.description }}</p>
                        <a href="{{ path(item.route) }}" class="btn futuristic-btn">Explorer</a>
                    </div>
                </div>
            </div>
        {% endfor %}
    </div>
</div>

<canvas id="backgroundCanvas"></canvas>

<style>

    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: hidden;
        font-family: 'Roboto Mono', monospace;
        background-color: #000;
    }

    canvas#backgroundCanvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background-color: #000;
    }

    .container {
        position: relative;
        z-index: 1;
    }

    .text-neon {
        color: rgb(0, 255, 234);
        text-shadow: 0 0 10px #00ffcc, 0 0 20px #00ffcc, 0 0 30px #00cc99;
    }

    .glow {
        border: none;
        height: 2px;
        background: linear-gradient(90deg, #00ffcc, #0066ff);
        box-shadow: 0 0 15px #00ffcc;
        background-color: #000;
    }

    .futuristic-card {
        background: linear-gradient(145deg, #161b22, #21262d);
        border: 1px solid rgba(0, 255, 204, 0.5);
        box-shadow: 0 0 20px rgba(0, 255, 204, 0.3), 0 0 10px rgba(0, 102, 255, 0.2) inset;
        border-radius: 15px;
        transition: transform 0.4s ease, box-shadow 0.4s ease;
        background-color: #000;
    }

    .futuristic-card:hover {
        transform: translateY(-5px) scale(1.05);
        box-shadow: 0 0 30px rgba(0, 255, 204, 0.5), 0 0 20px rgba(0, 102, 255, 0.3) inset;
        background-color: #000;
    }

    .futuristic-btn {
        background: linear-gradient(90deg, #00ffcc, #0066ff);
        border: none;
        color: #0d1117;
        font-weight: bold;
        padding: 12px 24px;
        border-radius: 30px;
        text-transform: uppercase;
        transition: all 0.3s ease-in-out;
        background-color: #000;
    }

    .futuristic-btn:hover {
        background: linear-gradient(90deg, #0066ff, #00ffcc);
        color: #fff;
        box-shadow: 0 0 10px #0066ff, 0 0 20px #00ffcc;
        background-color: #000;
    }
</style>

<script>
    const canvas = document.getElementById('backgroundCanvas');
    const ctx = canvas.getContext('2d');
    
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const particles = [];
    const colors = ['#00ffcc', '#0066ff', '#00cc99'];

    class Particle {
        constructor() {
            this.x = Math.random() * canvas.width;
            this.y = Math.random() * canvas.height;
            this.radius = Math.random() * 3;
            this.color = colors[Math.floor(Math.random() * colors.length)];
            this.speedX = (Math.random() - 0.5) * 2;
            this.speedY = (Math.random() - 0.5) * 2;
        }

        draw() {
            ctx.beginPath();
            ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
            ctx.fillStyle = this.color;
            ctx.fill();
        }

        update() {
            this.x += this.speedX;
            this.y += this.speedY;

            if (this.x < 0 || this.x > canvas.width) this.speedX *= -1;
            if (this.y < 0 || this.y > canvas.height) this.speedY *= -1;

            this.draw();
        }
    }

    function initParticles() {
        for (let i = 0; i < 200; i++) {
            particles.push(new Particle());
        }
    }

    function animate() {
        ctx.clearRect(0, 0, canvas.width, canvas.height);
        particles.forEach(p => p.update());
        requestAnimationFrame(animate);
    }

    initParticles();
    animate();

    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
    });
</script>
{% endblock %}
