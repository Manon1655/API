{% extends 'base.html.twig' %}
{% block title %}
    Liste des nationalites
{% endblock %}
{% block body %}
    <canvas id="backgroundCanvas"></canvas>
    <div class="container">
        <h1 class="animate-glitch text-center">
            nationalites
        </h1>
        <div class="row">
            {% for nationalite in nationalites %}
                <div class="col-md-4">
                    <div class="card futuristic-card mb-2" style="max-width: 20rem; margin-bottom: 1rem;">
                        <div class="card-body">
                            <p class="card-text">
                                <strong class="neon-text">ID:</strong> {{ nationalite.id }}<br>
                                <strong class="neon-text">Libell√©:</strong> {{ nationalite.libelle }}<br>
                                <strong class="neon-text">Auteurs:</strong> 
                                {% if nationalite.auteurs is iterable %}
                                    {% for auteur in nationalite.auteurs %}
                                        {{ auteur.nom }}
                                    {% endfor %}
                                {% else %}
                                    {{ nationalite.auteurs }}
                                {% endif %}
                            </p>
                        </div>
                    </div>
                </div>
            {% endfor %}
        </div>
    </div>
<style>
    html, body {
        margin: 0;
        padding: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        font-family: 'Roboto Mono', monospace;
        background-color: #000;
        color: white; 
    }

    canvas#backgroundCanvas {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        z-index: -1;
        background-color: #0a0a0a;
    }

    .container {
        position: relative;
        z-index: 1;
    }

    .animate-glitch {
        color: white; 
        font-size: 4rem;
        position: relative;
        animation: glitch 2.5s infinite;
    }

    @keyframes glitch {
        0% {
            text-shadow: 2px 0 red, -2px 0 blue;
        }
        20% {
            text-shadow: -2px -2px lime, 2px 2px magenta;
        }
        40% {
            text-shadow: 3px 0 red, -3px 0 blue;
        }
        100% {
            text-shadow: 0 0 10px cyan, 0 0 20px magenta;
        }
    }

    .glow {
        border: none;
        height: 3px;
        box-shadow: 0 0 20px #00ffcc, 0 0 30pxrgb(0, 38, 255);
    }

    .futuristic-card {
        background: linear-gradient(145deg,rgb(0, 0, 0),rgb(0, 0, 0));
        border: 1px solid rgba(0, 255, 204, 0.5);
        border-radius: 15px;
        transform-style: preserve-3d;
        transition: all 0.5s ease;
        box-shadow: 0 0 30px rgba(0, 255, 204, 0.3), 0 0 20px rgba(0, 102, 255, 0.3) inset;
        height: 100%;
    }

    .futuristic-card:hover {
        transform: translateY(-10px) rotateX(8deg) rotateY(-5deg);
        box-shadow: 0 0 40px rgba(0, 255, 255, 0.5), 0 0 20px rgba(0, 102, 255, 0.3) inset;
    }

    .futuristic-btn {
        background: linear-gradient(90deg, #00ffcc,rgb(17, 0, 255),rgb(83, 105, 138));
        border: none;
        color: white;
        padding: 10px 25px;
        border-radius: 25px;
        text-transform: uppercase;
        font-size: 1.2rem;
        font-weight: bold;
        transition: 0.3s ease;
        box-shadow: 0 0 10px rgba(0, 255, 204, 0.8);
    }

    .futuristic-btn:hover {
        background: linear-gradient(90deg, #0066ff, #00ffcc);
        color: #fff;
        box-shadow: 0 0 20px #00ffcc, 0 0 30px #0066ff;
    }

    .card-body {
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        height: 100%;
    }

    .futuristic-card .card-header, .futuristic-card .card-text {
        color: white; 
    }
</style>

<script>
    const canvas = document.getElementById('backgroundCanvas');
    const ctx = canvas.getContext('2d');
    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const columns = Math.floor(canvas.width / 20);
    const drops = Array(columns).fill(1);
    const chars = "0123456789ABCDEF".split("");

    function drawMatrix() {
        ctx.fillStyle = 'rgba(0, 0, 0, 0.1)';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = '#00ffcc';
        ctx.font = '16px monospace';
        
        drops.forEach((y, x) => {
            const text = chars[Math.floor(Math.random() * chars.length)];
            ctx.fillText(text, x * 20, y * 20);
            
            if (y * 20 > canvas.height && Math.random() > 0.975) {
                drops[x] = 0;
            }
            drops[x]++;
        });
    }

    setInterval(drawMatrix, 50);

    window.addEventListener('resize', () => {
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;
        drops.length = Math.floor(canvas.width / 20);
        drops.fill(1);
    });
</script>
{% endblock %}